<?xml version="1.0" encoding="UTF-8"?>
<doc xmlns="http://jimetevenard.com/ns/generate-xsl/doc"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:generate="http://jimetevenard.com/ns/generate-xsl">

    <meta>
        <namespaces>
            <namespace id="generate" uri="http://jimetevenard.com/ns/generate-xsl"
                usual-prefix="generate"/>
        </namespaces>
        <project repository="https://github.com/jimetevenard/generate-xsl">Generate XSL - GitHub</project>
    </meta>
    
    <!--
        TODOs
        =====
            
        * étoffer intro : principe, but, interêt/avantages...
        * vocalulaire :
          * "Génération" / "(pré) compilation" ?
          * ...
        * Définition du "contexte d'éxécution" (juste quelques lignes...)
        
        * Présentation finale
          * TOC
          * structure html (les section, le systeme de <h> est il pertinent ?
            
    -->
    
    



    <h>Generate XSL</h>
    <!-- ========== -->

    <section>

        <h>Introduction</h>

        <p> Generate-XSL est un langage d'annotions permettant de décrire la compilation d'une
            transformation XSL, en pré-calculant certaines évaluations dans un but d'optimisation
            des performances. </p>

        <p> Ces annotations s'expriment sous forme d'éléments et d'attributs XML appartenant au
            namespace <namespaceRef idRef="generate">Generate-XSL</namespaceRef> ajoutés dans la
            transformation XSL. </p>

        <p>Après compilation, on obtient une XSLT générée dans laquelle la valeur des variables, le
            résultat des appels de fonction, des appels de templates ou des structures de boucles et
            conditions annoté(e)s sont sérialisés.</p>
        

        <p>L'objectif principal de ce système d'annotation est d'optimiser le traitement d'une XSLT
            sans affecter son fonctionnement d'origine.<br/> Ainsi cette XSLT reste maintenable et
            testable, et des test comparés de la <definitionRef idRef="xsl-source">XSL
                source</definitionRef> et de la <definitionRef idRef="xsl-gen">XSL
                générée</definitionRef> permettent d'identifier facilement les éventuels effets de
            bord de la compilation. </p>

        <h>Exemple : </h>
        <p>Le code suivant :</p>
        
        <codeBlock>
            <xsl:choose generate:build="#all">
                <xsl:when test="true()">
                    <xsl:value-of select="'Yep !'"/>
                </xsl:when>
                <xsl:otherwhise>
                    <xsl:value-of select="'Nope !'"/>
                </xsl:otherwhise>
            </xsl:choose>
        </codeBlock>
        <p>Devient, après compilation :</p>
        <codeBlock>
            <xsl:value-of select="'Yep !'"/>
        </codeBlock>

        <p>Dans cet exemple, on a exprimé par l'attribut <langNodeRef nameRef="generate:build"/> la
            volonté de pré-évaluer ce <element>xsl:choose</element>.<br/> Ainsi, les différents
                <code>xsl:when/@test</code> ont été évalués et seul le code contenu dans le cas
            pertinent est retranscrit dans la <definitionRef idRef="xsl-gen">XSL
                générée</definitionRef>
        </p>
        
        
        <h>Modes de pré-évaluation</h>
        
        <p>
            Comme en XSLT, la notion de modes existe dans la compilation XSLT.           
        </p>
        
        <p>En effet, considérons le cas suivant :</p>
        
        <codeBlock>
            <xsl:template match="/">
                <!-- appel de template compilé -->
                <xsl:call-template generate:build="#all" generate:use-build-mode="call-foo" name="foo" />
            </xsl:template>
            
            <xsl:template name="foo">
                <xsl:sequence generate:build="call-foo" select="someXPath" />
            </xsl:template>
        </codeBlock>
        
        <p>
            Dans le présent exemple, il est souhaité que l'élément <element>xsl:sequence</element> du template
            foo ne soit pré-évalué que dans le cadre d'un appel lui-même pré-évalué de ce template.
        </p>
        
        <p>
            Il se pourrait en effet que ce template soit appelé ailleurs dans la XSLT, indépendamment du
            processus de pré-évaluation.
        </p>
        
        <p>
            Ici, l'élement <element>xsl:sequence</element> ne sera pré-évalué que dans le mode <code>call-foo</code>,
            mode que nous avons spécifié via l'attribut <langNodeRef nameRef="generate:use-build-mode" /> de <element>xsl:call-template</element>
        </p>
        
        <info>
            Le mode par défault est <b>#default</b><br />
            <b>#all</b> représente tous les modes de compilation.
        </info>
        
        
        
        <h>Contexte de la pré-évaluation</h>
        
        <p>
            La pré-évaluation de la XSL est une phase liée au build d'un projet.<br />
            Elle est donc totalement ignorante des données ou du contexte d'exécution.
        </p>
        
        <p>
            L'ensemble du <a href="https://www.w3.org/TR/xpath-30/#context">contexte XPath</a>, variables, paramètres, etc. disponibles pendant
            la phase de compilation
            est appelée <definitionRef idRef="contexte">contexte de génération</definitionRef><br />
            Le développeur qui met en place les annotations doit s'assurer que les expressions
            XPath évaluées sont effectivement évaluables dans ce contexte.
        </p>
        
        <p>
            Il peut s'aider en cela des éléments <langNodeRef nameRef="generate:use-import" />,
            <langNodeRef nameRef="generate:use-variable" /> et <langNodeRef nameRef="generate:use-param" />,
            ainsi que de l'attribut <langNodeRef nameRef="generate:use" /> pour rendre visibles des variables, des paramètres ou des
            imports (et donc les variables globales, les paramètres et les fonctions qu'ils déclarent) dans le contexte de génération.
        </p>
        
       
        
        <h>Implémentation XSLT</h>
        
        <p>
            Le présent projet est une implémentation en XSLT de ce système d'annotations.
        </p>
        <p>
            Son utilisation se fait en deux étapes :
            
            <img src="divers/Generate-XSL_FR.png" alt="Schema de fonctionnement" />
            
            <case>
            <p>La transformation <code>generate.xsl</code> prend en entrée la transformation XSL source,
            et produit en sortie une XSL intermédiaire.</p>
            </case>
            
            <case>
                <p>
                    Cette XSL intermédiaire doit ensuite être appelée sans entrée (template inital "init"),
                    et produit en sortie la XSL compilée.<br />
                    Si des paramètres ont été annotés comme visibles dans le contexte de génération, ils peuvent être passés
                    à cette XSL intermédiaire.
                </p>
                
            </case>          
        </p>
        
        <info>
            <h>Remarque :</h>
            <p>En l'absence d'annotations, la XSL générée est une copie de la XSL source.</p>
        </info>
        
        <h>Lanceur Java</h>
        
        <p>Un lanceur Java basé sur <a href="https://www.saxonica.com">Saxon</a> est fourni pour faciliter la transformation.</p>
        
       
        
        
            <p>
                Son utilisation est basée sur un fichier décrivant des scenari de compilation.<br/>
                Chaque scénario décrit la compilation d'une XSL :
                <ul>
                    <li>Le fichier source</li>
                    <li>L'emplacement cible pour la XSL compilée</li>
                    <li>Les paramètres à utiliser</li>
                </ul>
            </p>
            
            <codeBlock>
                <scenari>
                    <scenario name="mon-scenario">      
                        <source-xsl-path>source.xsl</source-xsl-path>
                        <target-xsl-path>target-dir/generated.xsl</target-xsl-path>
                        <params>
                            <param name="param-qname"
                                select="concat('to','to')"/>
                                <!-- <param... />* -->
                        </params>
                    </scenario>
                    
                    <!-- <scenario... />*  -->
                   </scenari>
            </codeBlock>
            
            <a href="scenari.xsd">Schéma XSD du fichier de scenari</a>
        <section>
            <h>Utilisation standalone</h>
            
            <codeBlock>java -jar generate-xsl.jar --help</codeBlock>
        </section>
        
        <section>
            <h>API pour intégration</h>
            
            <p>Le lanceur peut être intégré dans une application.</p>
            
            <p>La compilation est pilotée par une instance de la classe <a href="java-api/index.html?com/jimetevenard/xslt/Driver.html" >com.jimetevenard.xslt.Driver</a> </p>
            
        </section>
         
         <section>
             <h>Plugin Maven</h>
             
             <p>
                 TODO - cf. <a href="https://github.com/jimetevenard/Maven-XSL-Generator">Maven-XSL-Generator</a><br />
                   ECRIRE LE README dans le projet !
             </p>
             
                
             
         </section>
      
           
        <!-- ###################################################################################################################################### -->
        
        <h>Syntaxe du langage d'annotations</h>
        
        <p>Les annotations consistent en éléments <element>generate:*</element> et attributs <attribute>generate:*</attribute>.</p>
        
        <p>
            Les attributs <attribute>generate:*</attribute> se placent sur des instructions <element>xsl:*</element>,
            pour spécifier le comportement, lors de la génération, des instructions sur lesquelles ils sont placés.
        </p>
        
        <p>
            Les éléments <element>generate:*</element> doivent être des enfants de la racine <element>xsl:stylesheet</element>
            ou d'autres éléments <element>generate:*</element>.<br />
            Ceci pour ne pas perturber le comportement de la XSLT.
        </p>
        
        
        
        <h>Attributs et éléments du langage</h>
        
        
        <ul>
            <li>
                <a href="#c-instructions">Compiler des instructions XSL</a>
                <ul>
                    <li>Compiler une instruction par l’ajout de l’attribut <langNodeRef nameRef="generate:build" /></li>
                    <li>Dupliquer un template avec l’élément <langNodeRef nameRef="generate:copy-template" />
                        <ul>
                            <li>
                                Modifier le templace dupliqué avec les éléments <langNodeRef nameRef="generate:set-match" />,
                                <langNodeRef nameRef="generate:set-mode" />, <langNodeRef nameRef="generate:set-priority" />,
                                <langNodeRef nameRef="generate:set-name" />, <langNodeRef nameRef="generate:set-as" />,
                                <langNodeRef nameRef="generate:set-visibility" />, <langNodeRef nameRef="generate:redefine-variable" />
                                et <langNodeRef nameRef="generate:with-param" /></li>
                        </ul>
                    </li>
                    
                </ul>
            </li>
            <li>
                <a href="#c-modes">Contrôle des modes de compilation</a>
                <ul>
                    <li>Spécifier un mode de compilation  avec l'attribut <langNodeRef nameRef="generate:use-build-mode" /></li>
                    <li>La valeur de l'attribut <langNodeRef nameRef="generate:build" /> correspond au(x) mode(s) de compilation cible(s)</li>
                </ul>
            </li>
            <li>
                <a href="#c-modifer">Modifier la structure de la XSLT</a>
                <ul>
                    <li>Générer des variables (globales?(copy-template?)) avec l’élément <langNodeRef nameRef="generate:variable" /></li>
                    <li>Redéfinir une variable existante avec <langNodeRef nameRef="generate:redefine-variable" /></li>
                    <li>Générer des imports avec l’élément <langNodeRef nameRef="generate:import" /></li>
                    <li>Générer des paramètres globaux avec l’élément <langNodeRef nameRef="generate:param" /></li>
                    <li>Ajouter un bloc de code avec l’élément <langNodeRef nameRef="generate:target-block" /></li>
                </ul>
            </li>
            <li>
                <a href="#c-structure">Structures de contrôle du langage d’annotations</a>
                <ul>
                    <li>Structures conditionnelles  : éléments <langNodeRef nameRef="generate:if" /> et <langNodeRef nameRef="generate:choose" /></li>
                    <li>La boucle <langNodeRef nameRef="generate:for-each" /></li>
                </ul>
            </li>
            <li>
                <a href="#c-use">Utiliser des variables et paramètres dans le contexte de génération</a>
                <ul>
                    <li>l’attribut <langNodeRef nameRef="generate:use" /></li>
                    <li>les éléments <langNodeRef nameRef="generate:use-variable" />, <langNodeRef nameRef="generate:use-import" /> et <langNodeRef nameRef="generate:use-param" /></li>
                </ul>
            </li>
            <li>
                <a href="#c-ids">Identifier une instruction XSL</a>
                <ul>
                    <li>Ajout d’un identifiant par l’attribut <langNodeRef nameRef="generate:id" /></li>
                </ul>
            </li>
        </ul>
        
        
       
        <section id="c-instructions">
            
            <h>Compiler des instructions XSLT</h>
            
            <langAttribute implem-status="NA" doc-status="ok" name="generate:build">
                <p>Cet attribut sert à indiquer que l'on souhaite pré-évaluer l'instruction.</p>
                
                <h>Valeurs :</h>
                <case>
                    Mode(s) de génération dans lesquels l'instruction doit être pré-évaluée.
                </case>

                
                <p>Il peut s'ajouter :
                    <case>
                        <h>
                            Sur les éléments <element>xsl:variable</element>
                        </h>
                        <p>Le résultat généré est alors une copie de l'instruction <element>xsl:variable</element>
                            dont le contenu est un <code>sequence constructor</code> équivalent à la sérialisation
                            du resultat de l'évaluation de l'attribut <attribute>select</attribute> ou du contenu initial de 
                            l'élément <element>xsl:variable</element>
                        </p>
                        
                        <codeBlock>
                            <xsl:variable name="foo" generate:build="#all" select="concat('he','llo')"></xsl:variable>
                        </codeBlock>
                        
                        <p>Devient, après compilation :</p>
                        <codeBlock>
                            <xsl:variable name="foo">hello</xsl:variable>
                        </codeBlock>
                    </case>
                    <case>
                        <h>Sur les éléments <element>xsl:value-of</element></h>
                        <p>TODO vérifier l'implémentation...</p>
                    </case>
                    <case>
                        <h>Sur les éléments <element>xsl:call-template</element></h>
                        <p>
                            Nous avons la possibilité de pré-évaluer un appel de template
                            nommé de type <code>&lt;xsl:call-template name="foo" /&gt;</code>
                        </p>
                        <p>
                            Le résultat dans la xsl-générée est la sérialisation de la séquence
                            de retour du template.
                        </p>
                        <p>
                            Peut être complété par un attribut <langNodeRef nameRef="generate:use-build-mode" />.<br />
                            Les paramètres spécifiés s'appliquent<br /> 
                        </p>
                        <p>TODO exemple</p>
                    </case>
                    <case>
                        <h>Sur les éléments <element>xsl:with-param</element></h>
                        <p>Comportement identique au cas des <element>xsl:variable</element> décrit ci-dessus</p>
                    </case>
                    <case>
                        <h>Sur les éléments <element>xsl:if</element> et <element>xsl:choose</element>></h>
                        <p>Le(s) attributs <attribute>test</attribute> correspondant alors sont évalués.</p>
                        
                        <!-- extype -->
                        <p>Exemple, le code suivant</p>
                        <codeBlock>
                            <xsl:if generate:build="#all" test="true()">
                                <xsl:message>Hello !</xsl:message>
                            </xsl:if>
                        </codeBlock>
                        
                        <p>Devient, après compilation :</p>
                        <codeBlock>
                            <xsl:message>Hello !</xsl:message>
                        </codeBlock>
                    </case>
                    <case>
                        <h>Sur les éléments <element>xsl:for-each</element></h>
                        <p>Le contenu de bloc est reproduit et décliné pour chaque élément de la séquence 
                            spécifiée en <attribute>select</attribute></p>
                        
                        <codeBlock>
                            <xsl:for-each generate:build="#all" select="('foo','bar','baz')">
                                <xsl:message generate:build="#all" select="current()" />
                            </xsl:for-each>
                        </codeBlock>
                        
                        <p>Devient, après compilation :</p>
                        <codeBlock>
                            <xsl:message>foo</xsl:message>
                            <xsl:message>bar</xsl:message>
                            <xsl:message>baz</xsl:message>
                        </codeBlock>
                    </case>
  
                </p>
                
                
            </langAttribute>
            <langElement implem-status="NA" doc-status="ok" name="generate:copy-template">
                <p>Duplique dans la <definitionRef idRef="xsl-gen">XSL générée</definitionRef> un
                    <element>xsl:template</element> de la <definitionRef idRef="xsl-source">XSL
                        source</definitionRef> identifié soit par : <case>Une référence à son éventuel
                            attribut<langNodeRef nameRef="generate:id"/> exprimée sous forme d'un
                            attribut <attribute>idRef</attribute></case>
                    <case>Une référence à son <attribute>name</attribute> exprimée via un attribut
                        <attribute>name</attribute> sous réserve que celui-ci soit présent et
                        unique.</case>
                </p>
                
                <p>
                    <h>Attributs et valeurs :</h>
                    <case>
                        <attribute>idRef</attribute> : Identifiant (<langNodeRef nameRef="generate:id"/>) du template à cibler
                    </case>
                    <case>
                        <attribute>name</attribute> : Nom du template à cibler
                    </case>
                    
                </p>
                <info> Cet élément accepte les enfants <langNodeRef nameRef="generate:set-match"/>
                    <langNodeRef nameRef="generate:set-mode"/>
                    <langNodeRef nameRef="generate:set-priority"/>
                    <langNodeRef nameRef="generate:set-name"/>
                    <langNodeRef nameRef="generate:set-as"/>
                    <langNodeRef nameRef="generate:set-visibility"/> qui permettent de redéfinir les
                    attributs correspondants du template. </info>
                
                <p>Exemple, le code suivant :</p>
                
                <codeBlock>
                    <generate:for-each select="('a','p','div')" name="currentElement">
                        <generate:copy-template idRef="bar">
                            <generate:set-match value="{$currentElement}" />
                        </generate:copy-template>
                    </generate:for-each>
                    <xsl:template match="*" generate:id="bar">
                        <xsl:message select="name()" />
                    </xsl:template>
                </codeBlock>
                
                <p>Devient, après compilation :</p>
                <codeBlock> 
                    <xsl:template match="a" >
                        <xsl:message select="name()" />
                    </xsl:template>
                    <xsl:template match="p" >
                        <xsl:message select="name()" />
                    </xsl:template>
                   <xsl:template match="div" >
                       <xsl:message select="name()" />
                    </xsl:template>
                </codeBlock>
            </langElement>
                
            <langNodeSet names="generate:set-match generate:set-mode generate:set-priority generate:set-name generate:set-as generate:set-visibility"
                implem-status="NA" doc-status="ok">
                
                <langElement name="generate:set-match" />
                <langElement name="generate:set-mode" />       
                <langElement name="generate:set-priority" />   
                <langElement name="generate:set-name" />  
                <langElement name="generate:set-as" />   
                <langElement name="generate:set-visibility" />
                
                
                <p>Ces éléments permettent, dans un <langNodeRef nameRef="generate:copy-template"/> de modifier
                    l'attribut correspondant du template.</p>
            </langNodeSet>
            
            <langElement implem-status="0" doc-status="todo" name="generate:with-param">
                <p>TODO !</p>
            </langElement>
            
            
        
        </section>
        
        
        <section id="c-modifer">
            
            <h>Modifier la structure de la XSLT</h>
            
            <langElement implem-status="NA" doc-status="toreview" name="generate:variable">
                <p>Crée une <element>xsl:variable</element> dans la <definitionRef idRef="xsl-gen">XSL
                    générée</definitionRef></p>
                <p>L'évaluation ou non de la variable durant la compilation peut être exprimée par
                    l'attribut <langNodeRef nameRef="generate:build"/></p>
                
                <p>Exemple, le code suivant</p>
                <codeBlock>
                    <generate:variable name="foo" select="count('foo','bar')"></generate:variable>
                    <generate:variable name="bar" generate:build="#all" select="count('hello','world')"></generate:variable>
                </codeBlock>
                
                <p>Devient, après compilation :</p>
                <codeBlock>
                    <xsl:variable name="foo" select="count('foo','bar')"></xsl:variable>
                    <xsl:variable name="bar">2</xsl:variable>
                </codeBlock>
            </langElement>
            
            <langElement implem-status="NA" doc-status="toreview" name="generate:redefine-variable">
                <p>Redéfinit une variable déclarée dans la <definitionRef idRef="xsl-source">XSL
                    source</definitionRef> identifiée par : <case>Un attribut
                        <attribute>id</attribute>, traité comme référence à l'attribut <langNodeRef
                            nameRef="generate:id"/> de la variable</case>
                    <case>Un attribut <attribute>name</attribute> référençant le nom de la variable.
                        Dans ce second cas, l'élément <langNodeRef nameRef="generate:redefine-variable"
                        /> doit être placé dans le <i>scope</i> de la variable.</case>
                </p>
                
                <p>Exemple, le code suivant :</p>
                
                <codeBlock>
                    <generate:redefine-variable name="toto" select="'bar'" />
                    <xsl:variable name="toto" select="'foo'"></xsl:variable>
                </codeBlock>
                
                <p>Devient, après compilation :</p>
                <codeBlock>
                    <xsl:variable name="toto" select="'bar'"></xsl:variable>
                </codeBlock>
            </langElement>
            
            
            <langElement implem-status="NA" doc-status="toreview" name="generate:import"> Ajoute un élément
                <element>xsl:import</element> à la <definitionRef idRef="xsl-gen">XSL
                    générée</definitionRef>. </langElement>
            
            <langElement implem-status="NA" doc-status="toreview" name="generate:param"> Ajoute un élément
                <element>xsl:param</element> global à la <definitionRef idRef="xsl-gen">XSL
                    générée</definitionRef>. </langElement>
            
            <langElement implem-status="NA" doc-status="toreview" name="generate:target-block">
                <p>Permet d'insérer un bloc de code contenu dans la <definitionRef idRef="xsl-gen"
                    >XSL générée</definitionRef> sans impact sur l'éxécution de la XSL source.</p>
                
                <p>Exemple, le code suivant :</p>
                <codeBlock>
                  <xsl:variable name="foo" select="'foo'" />
                    <generate:target-block>
                        <xsl:variable name="bar" select="'bar'" />
                    </generate:target-block>
                </codeBlock>
                
                <p>Devient, après compilation :</p>
                <codeBlock>
                    <xsl:variable name="foo" select="'foo'" />
                    <xsl:variable name="bar" select="'bar'" />
                </codeBlock>
                
                <p>
                    Le contenu du <langNodeRef nameRef="generate:target-block" /> étant enfant
                    d'un élément étranger au namespace XSL, il est ignoré par le processeur
                    lors de l'éxucution de la XSL source.
                </p>
            </langElement>
        
        </section>
        
        <section id="c-modes">
            <h>Contrôle des modes de compilation</h>
            
            
            <langAttribute implem-status="NA" doc-status="tocomplete" name="generate:use-build-mode">
                <p>Permet de spécifier le mode de génération à utiliser lors de la
                    pré-évaluation d'un appel de template (<element>xsl:call-template</element>)
                    ou d'une copie de template. (<langNodeRef nameRef="generate:copy-template"></langNodeRef>)</p>
            </langAttribute>
            
            
        </section>
        
       
        <section id="c-structure">
            
            <h>Structures de contrôle du langage d’annotations</h>
            
            
            
            
            <langElement implem-status="NA" doc-status="old" name="generate:for-each">
                <p>Itère sur chaque élément de la séquence exprimée dans l'attribut
                    <attribute>select</attribute>.</p>
                <p>La valeur de cet attribut est évaluée dans le <definitionRef idRef="contexte"
                    >contexte de génération</definitionRef>.</p>
                <p>A chaque itération : <case>Les éléments <element>xsl:*</element> à l'intérieur du
                    bloc sont dupliqués, en tenant compte des <element>generate:*</element> et
                    <attribute>generate:*</attribute> qu'ils contiennent.</case>
                    <case>les instructions <element>generate:*</element> sont exécutées.</case>
                </p>
            </langElement>
            
            <langElement implem-status="NA" doc-status="old" name="generate:if">
                <p>Si la condition exprimée dans <attribute>test</attribute> est vraie, <case>Les
                    éléments <element>xsl:*</element> à l'intérieur du bloc sont dupliqués, en tenant
                    compte des <element>generate:*</element> et <attribute>generate:*</attribute>
                    qu'ils contiennent.</case>
                    <case>les instructions <element>generate:*</element> sont exécutées.</case>
                </p>
                <p>La valeur de l'attribut <attribute>test</attribute> est évaluée dans le
                    <definitionRef idRef="contexte">contexte de génération</definitionRef>.</p>
            </langElement>
            
            <langElement implem-status="0" doc-status="todo" name="generate:choose">
                <p>TODO</p>
            </langElement>
            
            
        </section>
        
        <section id="c-use">
            
            <h>Utiliser des variables et paramètres dans le contexte de génération</h>
            
            <langAttribute implem-status="NA" doc-status="tocomplete" name="generate:use">
                <p>Associé à un <element>xsl:import</element> ou à une
                    <element>xsl:variable</element> permet de rendre ce·tte dernier·e visible
                    dans le <definitionRef idRef="contexte">contexte de
                        génération</definitionRef>.</p>
                
                <p>Exemple : </p>
                
                <codeBlock>
                    <xsl:variable name="foo" generate:use="yes" select="('foo','bar','baz')"  />
                    <xsl:variable name="toto" generate:build="#all" select="count($foo)"></xsl:variable>
                    <!--
                    Pour pré-évaluer $toto, $foo doit être visible dans le contexte de compilation.
                 -->
                </codeBlock>
            </langAttribute>
            
            
            
            
            <langElement implem-status="NA" doc-status="pending" name="generate:use-import">
                <p>Importe une Transformation XSL externe et la rend visible dans le <definitionRef
                    idRef="contexte">contexte de génération</definitionRef>.</p>
                
                <p>La XSL cible peut être référencée : <case>Via un attribut <attribute>href</attribute>
                    contenant l'URI de la feuille de style importée</case>
                    <case>Via un attribut <attribute>id</attribute>, traité comme aune référence à
                        l'attribut <langNodeRef nameRef="generate:id"/> d'un import déclaré la
                        <definitionRef idRef="xsl-source">XSL source</definitionRef></case>
                </p>
                
                <p>Les variables, paramètres, templates, fonctions... déclarées dans la XSL importée
                    sont visibles dans le <definitionRef idRef="contexte">contexte de
                        génération</definitionRef></p>
                
                <warning>
                    <p> Il appartient au développeur de s'assurer que les expressions XPath exprimées
                        dans la XSL importée sont effectivement evaluables dans le <definitionRef
                            idRef="contexte">contexte de génération</definitionRef>. </p>
                    <p>L'utilisation de <langNodeRef nameRef="generate:use"/> ou <langNodeRef
                        nameRef="generate:use-variable"/> peut, par exemple, être néscéssaire.</p>
                    
                </warning>
            </langElement>
            
            <langElement implem-status="NA" doc-status="pending" name="generate:use-param">
                <p>
                    Permet d'utiliser un paramètre visible uniquement dans le <definitionRef idRef="contexte">contexte de génération.</definitionRef>
                </p>
                <warning>TODO, non implémenté !</warning>
            </langElement>
            
            <langElement implem-status="NA" doc-status="pending" name="generate:use-variable">
                <p>Définit une variable évaluée et visible dans le <definitionRef idRef="contexte"
                    >contexte de génération</definitionRef>.</p>
                <warning>La/les expressions XPath exprimées pour définir la valeur de la variable
                    doivent être effectivement évaluables dans le contexte de génération.</warning>
                
                <p>Exemple : </p>
                
                <codeBlock>
                    <xsl:use-variable name="foo" select="('foo','bar','baz')"  />
                    <xsl:variable name="toto" select="14"></xsl:variable>
                    <generate:redefine-variable name="toto" select="count($foo)"></generate:redefine-variable>
                    
                </codeBlock>
            </langElement>
            
        </section>
        
       
        
        <section id="c-ids">
            <h>Identifier une instruction XSL</h>
            
            <langAttribute implem-status="NA" doc-status="todo" name="generate:id">
                <p>Permet d'attribuer un identifiant à un élément <element>xsl:*</element>.</p>
                <p>Cet identifiant peut être utilisé pour le designer dans une
                    annotation<element>generate:*</element>.<br />
                    Exemple :
                </p>
                <codeBlock>
                    <xsl:template generate:id="bar" match="/"><!-- (...) --></xsl:template>
                    <generate:remove idRef="bar" ></generate:remove>
                </codeBlock>
            </langAttribute>
            
        </section>
        



        

     

        

        



       

      

       
       
       
        


       
            <h>Definitions</h>

            <definition id="contexte">
                <h>Contexte de génération</h>
                <p>TODO : Les définitions sont abandonnées - A remplacer par un systeme d'id générique.
                    De façon générale, le format doc ne sert à rien, rendre plus proche du HTML</p>
            </definition>

            <definition id="xsl-source">
                <h>XSL Source</h>
                <p>La XSL source (TODO rédiger)</p>
            </definition>

            <definition id="xsl-gen">
                <h>XSL Générée</h>
                <p>La XSL générée (TODO rédiger)</p>
            </definition>

        

       <!-- 
           TESTS DIVERS
           
           <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt
            ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation
            ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur
            sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est laborum. </p>

        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt
            ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation
            ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in
            reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur
            sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id
            est laborum. </p>

        <h>Blocs de code :</h>
        
        <codeBlock>

            <element-whithout-children foo="bar"></element-whithout-children>

            <xsl:template match="test2">
                <xsl:variable name="toto"> Hey, toto ! <xsl:attribute name="zeToto"> du texte.
                    </xsl:attribute>
                </xsl:variable>
                <xsl:attribute name="zeToto"> du texte. </xsl:attribute>
                <xsl:attribute name="zeToto"> Beaucoup de looooooooooooonnnnnnnnnnnnnnng texte.
                </xsl:attribute>
            </xsl:template>

        </codeBlock>
        
        <codeBlock>
            
            <xsl:stylesheet>
            
             <xsl:template match="test2">
                 <element-whithout-children foo="bar"></element-whithout-children>
                 <!-\- sans commentaire... -\->
                 <xsl:attribute name="zeToto"> du texte court. </xsl:attribute>
                 <xsl:attribute name="zeToto"> Beaucoup de looooooooooooonnnnnnnnnnnnnnng texte.
                 </xsl:attribute>
             </xsl:template>
                
            </xsl:stylesheet>
            
        </codeBlock>

        <langElement implem-status="NA" doc-status="pending" name="generate:exemple">
            <p>Ceci est un exemple de documentation d'élément XML du language</p>
            <h>Exemple :</h>
            <p>titi toto... Il peut contenir des <element>template</element> avec des attributs
                <attribute>name</attribute></p>
            
            <p>On peut bien sûr, référencer des langNodes dans cette doc, comme l'élément
                <langNodeRef nameRef="generate:use-import"/> ou l'attribut <langNodeRef
                    nameRef="generate:build"/></p>
        </langElement>-->

    </section>



</doc>
