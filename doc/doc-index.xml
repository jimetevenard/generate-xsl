<?xml version="1.0" encoding="UTF-8"?>
<doc xmlns="http://jimetevenard.com/ns/generate-xsl/doc"  
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema"
    xmlns:generate="http://jimetevenard.com/ns/generate-xsl">

    <meta>
        <namespaces>
            <namespace id="generate" uri="http://jimetevenard.com/ns/generate-xsl"
                usual-prefix="generate"/>
        </namespaces>
        <project repository="#URL-du-repo">Generate XSL</project>
    </meta>
    
    

    <title>Generate XSL</title>

    <section>

        <p> Generate-XSL est framework permettant la pré-compilation d'une transformation XSL, en
            précalculant certaines évaluations dans un but d'optimisation des performances. </p>

        <p> L'ajout des information de précompilation se fait via un système d'annotations 
            sous formes d'éléments et d'attributs XMLajoutés à la transformation, exprimés dans le
            namespace <namespaceRef idRef="generate">Generate-XSL</namespaceRef>.</p>
        
        
        <!-- 
            TODO, étoffer intro
            
        -->
        <code>
            <xsl:template match="test">
                Toto
            </xsl:template>
        </code>
        
        
        <p>TODO principe, but, interêt/avantages...</p>
        
        <p>
            Hello ! 
            <p>Blop !</p>
        </p>

       <!-- <toc/> -->



        <langElement doc-status="pending" name="generate:exemple">
            <p>Ceci est un exemple de documentation d'élément XML du language</p>
            <title>Exemple :</title>
            <p>titi toto... Il peut contenir des <element>template</element> avec des attributs <attribute>name</attribute></p>
            
            <p>On peut bien sûr, référencer des langNodes dans cette doc,
                comme l'élément <langNodeRef nameRef="generate:use-import"/> ou l'attribut <langNodeRef nameRef="generate:evaluate"/></p>
        </langElement>
        
        <langElement doc-status="todo" name="generate:target-p">
            <p>Le contenu de cet élément seront présentent dans la <definitionRef idRef="xsl-gen">XSL générée</definitionRef></p>
        </langElement>

        <langElement doc-status="pending" name="generate:use-import">
            <p>Importe une Transformation XSL externe et la rend visible 
                dans le <definitionRef idRef="contexte">contexte de génération</definitionRef>.</p>
            
            <p>La XSL cible peut être référencée :
                <case>Via un attribut <attribute>href</attribute> contenant l'URI de la feuille de style importée</case>
                <case>Via un attribut <attribute>id</attribute>, traité comme aune référence à l'attribut <langNodeRef nameRef="generate:id" /> 
                d'un import déclaré la <definitionRef idRef="xsl-source">XSL source</definitionRef></case>
            </p>
            
            <p>Les variables, paramètres, templates, fonctions... déclarées dans la
                XSL importée sont visibles dans le <definitionRef idRef="contexte">contexte de génération</definitionRef></p>
            
            <warning>
                <p>
                Il appartient au développeur de s'assurer que les expressions XPath exprimées dans la XSL importée
                sont effectivement evaluables dans le <definitionRef idRef="contexte">contexte de génération</definitionRef>.
                </p>
                <p>L'utilisation de <langNodeRef nameRef="generate:use" /> ou
                    <langNodeRef nameRef="generate:use-variable" /> peut, par exemple, être néscéssaire.</p>
                
            </warning>
        </langElement>

        <langElement doc-status="pending" name="generate:import">
            Ajoute un élément <element>xsl:import</element> à la <definitionRef idRef="xsl-gen">XSL générée</definitionRef>.
        </langElement>
        
        <langElement doc-status="pending" name="generate:param">
            Ajoute un élément <element>xsl:param</element> à la <definitionRef idRef="xsl-gen">XSL générée</definitionRef>.
        </langElement>

        <langElement doc-status="pending" name="generate:use-variable">
            <p>Définit une variable évaluée et visible dans le <definitionRef idRef="contexte">contexte de génération</definitionRef>.</p>
            <warning>La/les expressions XPath exprimées pour définir la valeur de la variable
            doivent être effectivement évaluables dans le contexte de génération.</warning>
        </langElement>

        <langElement doc-status="todo" name="generate:for-each">
            <p>Itère sur chaque élément de la séquence exprimée dans l'attribut <attribute>select</attribute>.</p>
            <p>La valeur de cet attribut est évaluée dans le <definitionRef idRef="contexte">contexte de génération</definitionRef>.</p>
            <p>A chaque itération :
                <case>Les éléments <element>xsl:*</element> à l'intérieur du bloc sont dupliqués,
                en tenat compte des <element>generate:*</element> et <attribute>generate:*</attribute>
                qu'ils contiennent.</case>
                <case>les instructions <element>generate:*</element> sont éxécutées.</case>
            </p>
        </langElement>

        <langElement doc-status="todo" name="generate:if">
            <p>Si la condition exprimée dans <attribute>test</attribute> est vraie,
                <case>Les éléments <element>xsl:*</element> à l'intérieur du bloc sont dupliqués,
                    en tenat compte des <element>generate:*</element> et <attribute>generate:*</attribute>
                    qu'ils contiennent.</case>
                <case>les instructions <element>generate:*</element> sont éxécutées.</case>
            </p>
            <p>La valeur de l'attribut <attribute>test</attribute> est évaluée
                dans le <definitionRef idRef="contexte">contexte de génération</definitionRef>.</p>
        </langElement>



        <langElement doc-status="todo" name="generate:copy-template">
            <p>Duplique dans la <definitionRef idRef="xsl-gen">XSL générée</definitionRef> un <element>xsl:template</element>
            de la <definitionRef idRef="xsl-source">XSL source</definitionRef> identifié par :
                <case>Une référence à son éventuel attribut<langNodeRef nameRef="generate:id" />
                exprimée sous forme d'un attribut <attribute>id</attribute></case>
                <case>Une référence à son <attribute>name</attribute> exprimée via un
                    attribut <attribute>name</attribute> sous réserve qu'il soit présent et unique.</case>
            </p>
            <info>
                Cet élément accepte les enfants <langNodeRef nameRef="generate:set-match" />
                <langNodeRef nameRef="generate:set-mode" /> <langNodeRef nameRef="generate:set-priority" />
                <langNodeRef nameRef="generate:set-name" /> <langNodeRef nameRef="generate:set-as" />
                <langNodeRef nameRef="generate:set-visibility" /> 
                qui permettent de redifinir les attributs correspondants du template.
            </info>
        </langElement>

        <langElement name="generate:set-match" >
            <p>Permet, dans un <langNodeRef nameRef="generate:copy-template" />
            de modifier l'attribut correspondant du template.</p>
        </langElement>
        
        <langElement name="generate:set-mode" >
            <p>Permet, dans un <langNodeRef nameRef="generate:copy-template" />
                de modifier l'attribut correspondant du template.</p>
        </langElement>
        
        <langElement name="generate:set-priority" >
            <p>Permet, dans un <langNodeRef nameRef="generate:copy-template" />
                de modifier l'attribut correspondant du template.</p>
        </langElement>
        
        <langElement name="generate:set-name" >
            <p>Permet, dans un <langNodeRef nameRef="generate:copy-template" />
                de modifier l'attribut correspondant du template.</p>
        </langElement>
        
        <langElement name="generate:set-as" >
            <p>Permet, dans un <langNodeRef nameRef="generate:copy-template" />
                de modifier l'attribut correspondant du template.</p>
        </langElement>
        
        <langElement name="generate:set-visibility" >
            <p>Permet, dans un <langNodeRef nameRef="generate:copy-template" />
                de modifier l'attribut correspondant du template.</p>
        </langElement>



        <langElement doc-status="todo" name="generate:with-param">
            <p>TODO !</p>
        </langElement>

        <langElement doc-status="todo" name="generate:redefine-variable">
            <p>Redéfinit une variable déclarée dans la 
                <definitionRef idRef="xsl-source">XSL source</definitionRef>
            identifiée par :
            <case>Un attribut <attribute>id</attribute>, traité comme référence à l'attribut <langNodeRef nameRef="generate:id"/> de la variable</case>
                <case>Un attribut <attribute>name</attribute> référençant le nom de la variable.
                    Dans ce second cas, l'élément <langNodeRef nameRef="generate:redefine-variable"/>
                    doit être placé dans le <i>scope</i> de la variable.</case>
            </p>
        </langElement>


        <langElement doc-status="todo" name="generate:variable">
            <p>Crée une <element>xsl:variable</element> dans la <definitionRef idRef="xsl-gen">XSL générée</definitionRef></p>    
            <p>L'évaluation ou non de la variable durant
                la compilation peut être exprimée par
                l'attribut <langNodeRef nameRef="generate:evaluate" /></p>
        </langElement>


        <langAttribute doc-status="todo" name="generate:use">
            <p>Associé à un <element>xsl:import</element> ou à une <element>xsl:variable</element>
                permet de rendre ce·tte dernier·e visible dans
                le <definitionRef idRef="contexte">contexte de génération</definitionRef>.</p>
        </langAttribute>
        
        <langAttribute doc-status="todo" name="generate:evaluate">
            <p>Si l'attribut <langNodeRef nameRef="generate:evaluate" /> vaut <b>build</b>,
                la valeur de la variable est évaluée pendant la compilation
                et sérializée dans la <definitionRef idRef="xsl-gen">XSL générée</definitionRef>.</p>
            <p>Si l'attribut <langNodeRef nameRef="generate:evaluate" /> vaut <b>call</b> ...</p>
        </langAttribute>
        
        <!--
        
        séparation selon l'elt de l'attribut ?
        ======================================
        
        NON, c'est inutile
        un @generate:evaluate à toujours la même fonction.
        
        Juste préciser dans la description s'il y a des subtilités
        
        <langAttribute doc-status="todo" name="xsl:call-template[@generate:evaluate = 'build']"/>
        
        <langAttribute doc-status="todo" name="xsl:if[@generate:evaluate = 'build']"/>
        <langAttribute doc-status="todo" name="xsl:if[@generate:evaluate = 'call']"/>

        <langAttribute doc-status="todo" name="xsl:for-each[@generate:evaluate = 'build']"/>
        <langAttribute doc-status="todo" name="xsl:for-each[@generate:evaluate = 'call']"/>

        <langAttribute doc-status="todo" name="xsl:choose[@generate:evaluate = 'build']"/>
        <langAttribute doc-status="todo" name="xsl:choose[@generate:evaluate = 'call']"/>

        <langAttribute doc-status="todo" name="xsl:value-of[@generate:evaluate = 'build']"/>
        <langAttribute doc-status="todo" name="xsl:value-of[@generate:evaluate = 'call']"/>
        -->
        
        
        <langAttribute doc-status="todo" name="generate:id">
            <p>Permet d'attribuer un ID à un élément <element>xsl:*</element>.</p>
            <p>Cet ID peut être utilisé pour le designer dans une annotation<element>generate:*</element></p>
        </langAttribute>
        
        <section>
            <title>Definitions</title>
            
            <definition id="contexte">
                <title>Contexte de génération</title>
                <p>Bla Bla bla...</p>
            </definition>
            
            <definition id="xsl-source">
                <title>XSL Source</title>
                <p>La XSL source (TODO rédiger)</p>
            </definition>
            
            <definition id="xsl-gen">
                <title>XSL Générée</title>
                <p>La XSL générée (TODO rédiger)</p>
            </definition>
            
        </section>
        
        

    </section>



</doc>
